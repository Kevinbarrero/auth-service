// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  email,
  full_name,
  hashed_password
)
VALUES (
  $1, $2, $3
)
RETURNING email, full_name, hashed_password, password_changed_at, created_at
`

type CreateUserParams struct {
	Email          string `json:"email"`
	FullName       string `json:"full_name"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Users, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser, arg.Email, arg.FullName, arg.HashedPassword)
	var i Users
	err := row.Scan(
		&i.Email,
		&i.FullName,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT email, full_name, hashed_password, password_changed_at, created_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (Users, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i Users
	err := row.Scan(
		&i.Email,
		&i.FullName,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
